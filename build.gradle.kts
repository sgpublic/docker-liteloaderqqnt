/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 */
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.github.breadmoirai.githubreleaseplugin.GithubReleaseTask
import de.undercouch.gradle.tasks.download.Download
import io.github.sgpublic.VersionInfo
import io.github.sgpublic.command
import io.github.sgpublic.gradle.VersionGen

plugins {
    alias(libs.plugins.docker.api)
    alias(libs.plugins.release.github)
    alias(libs.plugins.buildsrc.utils)
}

group = "io.github.sgpublic"
version = "${VersionGen.COMMIT_COUNT_VERSION}"

tasks {
    val tag = "mhmzx/docker-liteloaderqqnt"

    val versionInfo by creating(VersionInfo::class) {
        token = findEnv("publishing.gitlab.token")
        dockerLinuxqqRepoHost = findEnv("publishing.gitlab.host")
    }

    val downloadLiteLoader by creating(Download::class) {
        group = "liteloaderqqnt"
        src(provider { versionInfo["llqqnt.url"] })
        dest(provider { layout.buildDirectory.file("llqqnt/${versionInfo["llqqnt.file"]}").get() })

        doLast {
            copy {
                from(zipTree(layout.buildDirectory.file("llqqnt/${versionInfo["llqqnt.file"]}")))
                into(layout.buildDirectory.dir("llqqnt/LiteLoaderQQNT"))
            }
        }
    }

    val dockerCreateDockerfile by creating(Dockerfile::class) {
        dependsOn(downloadLiteLoader)
        doFirst {
            delete(layout.buildDirectory.file("docker-linuxqq"))
            copy {
                from("./src/main/docker/")
                into(layout.buildDirectory.dir("docker-linuxqq/rootf"))
            }
            copy {
                from(layout.buildDirectory.dir("llqqnt/LiteLoaderQQNT"))
                into(layout.buildDirectory.dir("docker-linuxqq/rootf/opt/LiteLoaderQQNT"))
            }
        }
        group = "docker"
        destFile = layout.buildDirectory.file("docker-linuxqq/Dockerfile")
        from(provider { Dockerfile.From("mhmzx/docker-linuxqq:${versionInfo["linuxqq.version"]}") })
        workingDir("/tmp")
        copyFile("./rootf", "/")
        environmentVariable(provider {
            mapOf(
                "APP_NAME" to "LiteLoaderQQNT",
                "APP_VERSION" to "${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}",
                "DOCKER_IMAGE_VERSION" to "${versionInfo["linuxqq.version"]}-${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}",
                "LITELOADERQQNT_PROFILE" to "\$XDG_CONFIG_HOME/LiteLoaderProfile",
                "LITELOADERQQNT_HOME" to "\$XDG_CONFIG_HOME/LiteLoaderQQNT",
            )
        })
        runCommand(command(
            "chown 1000:1000 \$QQ_HOME/resources/app",
            "chown 1000:1000 \$QQ_HOME/resources/app/application",
        ))
    }
    val dockerBuildImage by creating(DockerBuildImage::class) {
        group = "docker"
        dependsOn(dockerCreateDockerfile)
        inputDir = layout.buildDirectory.dir("docker-linuxqq")
        dockerFile = dockerCreateDockerfile.destFile
        images.add(provider { "$tag:${versionInfo["linuxqq.version"]}-${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}" })
        images.add(provider { "$tag:${versionInfo["linuxqq.version"]}" })
        images.add(provider { "$tag:${versionInfo["llqqnt.version"]}" })
        images.add("$tag:latest")
        noCache = true
    }

    val dockerPushBuildBookImageOfficial by creating(DockerPushImage::class) {
        group = "docker"
        dependsOn(dockerBuildImage)
        images.add(provider { "$tag:${versionInfo["linuxqq.version"]}-${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}" })
        images.add(provider { "$tag:${versionInfo["linuxqq.version"]}" })
        images.add(provider { "$tag:${versionInfo["llqqnt.version"]}" })
        images.add("$tag:latest")
    }

    val githubRelease by getting(GithubReleaseTask::class) {
        authorization = provider {
            "Token ${findEnv("publishing.github.token").get()}"
        }
        owner = "sgpublic"
        repo = "docker-liteloaderqqnt"
        tagName = provider { "${versionInfo["linuxqq.version"]}-${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}" }
        releaseName = provider { "${versionInfo["linuxqq.version"]}-${versionInfo["llqqnt.version"]}-${versionInfo["dockerimage.version"]}" }
        overwrite = true
    }
}

fun findEnv(name: String) = provider {
    findProperty(name)?.toString()?.takeIf { it.isNotBlank() }
        ?: System.getenv(name.replace(".", "_").uppercase())
}

docker {
    registryCredentials {
        username = findEnv("publishing.docker.username")
        password = findEnv("publishing.docker.password")
    }
}
